{"version":3,"sources":["components/Country.js","components/CountryFilter.js","components/NameFilter.js","components/Persons.js","components/PersonalForm.js","components/Notification.js","services/persons.js","services/countries.js","App.js","index.js"],"names":["Country","country","name","capital","population","languages","map","item","index","src","flag","alt","width","height","CountryFilter","countries","getCountriesFromAPI","length","onClick","render","NameFilter","state","setState","value","onChange","event","target","Persons","persons","filter","deletePerson","filteredPersons","person","toLowerCase","includes","number","isFilterApplied","PersonalForm","props","onSubmit","handleSubmit","setStateName","phone","setStatePhone","type","Notification","notificationMessage","isError","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","baseURL","exportee","create","newPerson","axios","post","then","response","data","catch","error","getPersons","get","id","delete","updatePerson","updatedPerson","put","getCountries","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","setFilter","setCountry","setCountries","setNotificationMessage","setError","setTimeOutForNotification","setTimeout","useEffect","personServices","getCountriesFromApi","countryServices","console","log","newCountry","preventDefault","duplicatedPerson","find","window","confirm","status","concat","deletedPerson","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c66b90d4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Country = ({country}) => {\n    \n    // let weather = null\n\n    // useEffect(() => {\n    //     const link = \"https://api.weatherstack.com/current?access_key=\" + process.env.REACT_APP_API_KEY + \"&query=\" + country.capital\n    //     axios\n    //         .get(link)\n    //         .then(response => {\n    //             weather = response.data\n    //         })\n    // }, [])\n\n    return (\n        <>\n            <h1>{country.name}</h1>\n            <p>\n                capital {country.capital} <br/>\n                population {country.population}\n            </p>\n            <h1>Languages</h1>\n            <ul>\n                {country.languages.map((item, index) => <li key={index}>{item.name}</li>)}\n            </ul>\n\n            <img src={country.flag} alt='a colorful flag' width='100' height='100'/>          \n\n            {/* <Weather weather={weather}/> */}\n        </>\n    )\n}\n\nexport default Country;","import React from \"react\";\nimport Country from \"./Country\";\n\nconst CountryFilter = ({countries, getCountriesFromAPI})  => {\n    \n    \n\n    const render = () => {\n        switch (countries.length) {\n            case 1: {\n                const country = countries[0]\n                return (\n                    <>\n                        <Country country={country}/>\n                    </>\n                )\n            }\n            case 0: {\n                return (\n                    <></>\n                )\n            }\n            default: {  \n                if (countries.length > 10) {\n                    return (\n                        <p>Too many matches, specify another filter</p>\n                    )\n                } else if (countries.length <= 10) {\n                    return (\n                        <ul>\n                            {countries.map((item, index) => \n                                <li key={index}>{item.name} <button onClick={() => {\n                                    getCountriesFromAPI(item.name)\n                                }}>show</button> </li>\n                            )}\n                        </ul>\n                    )\n                }\n            }\n        }\n    }\n    return (\n        <>\n            {render()}\n        </>\n    )\n}\n\nexport default CountryFilter","  \nimport React from 'react'\n\nconst NameFilter = ({state, setState}) => {\n    return (\n        <div>\n            filter shown with <input value={state} onChange={(event) => setState(event.target.value)}/>\n        </div>\n    )\n}\n\nexport default NameFilter","import React from \"react\";\n\nconst Persons = ({persons, filter, deletePerson}) => {\n    const isFilterApplied = () => {\n      if (filter === '') {\n        if (persons.length !== 0) {\n          return (\n            <ul>\n              {persons.map((person, index) => <li key={index}>{person.name} {person.number} <button onClick={() => deletePerson(person)}>delete</button></li>)}\n            </ul>\n          )\n        }\n      } else {\n        const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(filter))\n        return (\n          <ul>\n            {filteredPersons.map((person, index) => <li key={index}>{person.name} {person.number} <button onClick={() => deletePerson(person)}>delete</button></li>)}\n          </ul>\n        )\n      }\n    }\n    return(\n        <div>\n            {isFilterApplied()}\n        </div>\n    )\n}\n\nexport default Persons","import React from \"react\"\n\nconst PersonalForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                name: <input value={props.name} onChange={(event) => props.setStateName(event.target.value)}/>\n            </div>\n            <div>\n                phone: <input value={props.phone} onChange={(event) => props.setStatePhone(event.target.value)}/>\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonalForm","import React from \"react\";\n\nconst Notification = ({notificationMessage, isError}) => {\n    const notificationErrorStyle = {\n        color: 'red',\n        background: 'lightgrey',\n        fontSize: '20px',\n        borderStyle: 'solid',\n        borderRadius: '5px',\n        padding: '10px',\n        marginBottom: '10px'\n    }\n\n    const notificationSuccessStyle = {\n        color: 'green',\n        background: 'lightgrey',\n        fontSize: '20px',\n        borderStyle: 'solid',\n        borderRadius: '5px',\n        padding: '10px',\n        marginBottom: '10px'\n    }\n\n    if (notificationMessage === '') {\n        return null\n    } else if (isError === false) {\n        return (\n            <div style={notificationSuccessStyle}>\n                {notificationMessage}\n            </div>\n        )\n    } \n    return (\n        <div style={notificationErrorStyle}>\n            {notificationMessage}\n        </div>\n    )\n}\n\nexport default Notification","import axios from \"axios\"\nconst baseURL = `http://localhost:3001/api/persons`\n\nconst create = newPerson => {\n    return axios\n        .post(baseURL, newPerson)\n        .then(response => response.data)\n        .catch(error => error)\n}\n\nconst getPersons = () => {\n    return axios\n        .get(baseURL)\n        .then(response => response.data)\n        .catch(error => error)\n}\n\nconst deletePerson = (id) => {\n    return axios\n        .delete(`${baseURL}/${id}`)\n        .then(response => response)\n        .catch(error => error)\n}\n\nconst updatePerson = (id, updatedPerson) => {\n    return axios    \n        .put(`${baseURL}/${id}`, updatedPerson)\n        .then(response => response)\n}\n\nconst exportee = {\n    create, \n    getPersons,\n    deletePerson,\n    updatePerson\n}\nexport default exportee","import axios from \"axios\";\nconst baseURL = 'https://restcountries.com/v2/name'\n\nconst getCountries = name => {\n    return axios.get(`${baseURL}/${name}`)\n        .then(response => {\n            return response.data\n        })\n}\n\nconst exportee = {\n    getCountries\n}\n\nexport default exportee","import React, { useEffect, useState } from 'react'\nimport CountryFilter from './components/CountryFilter'\nimport NameFilter from './components/NameFilter'\nimport Persons from './components/Persons'\nimport PersonalForm from './components/PersonalForm'\nimport Notification from './components/Notification'\nimport personServices from './services/persons'\nimport countryServices from './services/countries';\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ country, setCountry ] = useState('')\n  const [ countries, setCountries ] = useState([])\n  const [ notificationMessage, setNotificationMessage ] = useState('')\n  const [ error, setError] = useState(false)\n\n  const setTimeOutForNotification = () => {\n    const timeOutForNotificationMessage = 5000\n    setTimeout(() => { setNotificationMessage('')}, timeOutForNotificationMessage)\n  }\n\n  useEffect(() => {\n    personServices.getPersons()\n      .then(data => {\n        setPersons(data)\n      })\n  }, [])\n\n\n  const getCountriesFromApi = (name) => {\n    countryServices.getCountries(name)\n      .then(data => {\n        setCountries(data)\n      })\n      .catch(error => {\n        console.log(\"something is wrong\")\n      })\n  }\n\n  const handleCountryChange = (event) => {\n    const newCountry = event.target.value\n    setCountry(newCountry)\n\n    if (newCountry !== '') {\n      getCountriesFromApi(newCountry)\n    }\n  }  \n\n  const addNewPerson = (event) => {\n    event.preventDefault()\n\n    // find duplicate\n    const duplicatedPerson = persons.find(person => person.name === newName)\n\n    if (!duplicatedPerson) { // there is no duplicate \n      // create new person object\n      const newPerson = {\n        name: newName,\n        number: newPhone\n      }\n      // post request to add new person into db.json\n      personServices.create(newPerson)\n        .then(data => {\n          // update new states \n          setPersons(persons.concat(data))\n\n          // update notification \n          setError(false)\n          setNotificationMessage(`Added ${data.name}`)\n          // set time out to delete notification \n          setTimeOutForNotification()\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    } else {\n      // update phone number of existed person in the phone book\n      const isReplace = window.confirm(duplicatedPerson.name + ' is already added to the phone book, replace the old number with a new one ? ')\n\n      if (isReplace) {\n        // update new phone for new person\n        const updatedPerson = {...duplicatedPerson, number: newPhone} \n\n        // put request to update current person\n        personServices.updatePerson(updatedPerson.id, updatedPerson)\n          .then(data => {\n            switch(data.status) {\n              case 200: {\n                setPersons(persons.map(person => person.name !== updatedPerson.name ? person : updatedPerson))\n                // update notification \n                setError(false)\n                setNotificationMessage(`Phone number of ${updatedPerson.name} is changed`)\n\n                setTimeOutForNotification()\n                break\n              }\n              default: {}\n            }\n          })\n          .catch(error => {\n            setError(true)\n            setNotificationMessage(`Information of ${updatedPerson.name} has already been removed from the server`)\n            setTimeOutForNotification()\n            // update state \n            personServices.getPersons()\n              .then(data => setPersons(data))\n          })\n      }\n    } \n\n    // reset state \n    setNewName('')\n    setNewPhone('')\n  }\n\n  // handle delete a person from db.json\n  const handleDeletePerson = deletedPerson => {\n    const isDelete = window.confirm(\"Delete \" + deletedPerson.name + \" ?\")\n    \n    if (isDelete) {\n      personServices.deletePerson(deletedPerson.id)\n        .then(response => {\n          // filter deleted person => return new array \n          const filteredPersons = persons.filter(person => person.name !== deletedPerson.name)\n\n          // update states \n          setPersons(filteredPersons)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    }\n  }\n\n  return (\n    <div>\n      find country <input value={country} onChange={handleCountryChange}/>\n\n      <CountryFilter countries={countries} getCountriesFromAPI={getCountriesFromApi}/>\n\n      <h2>Phonebook</h2>\n\n      <Notification notificationMessage={notificationMessage} isError={error}/>\n\n      <NameFilter state={filter} setState={setFilter}/>\n\n      <h2>add a new</h2>\n      \n      <PersonalForm \n        name={newName} phone={newPhone} \n        setStateName={setNewName} setStatePhone={setNewPhone}\n        handleSubmit={addNewPerson}/>\n      <h2>Numbers</h2>\n\n      <Persons persons={persons} filter={filter} deletePerson={handleDeletePerson}/>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}